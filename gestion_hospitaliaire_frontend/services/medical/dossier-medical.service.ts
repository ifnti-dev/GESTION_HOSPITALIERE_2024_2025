import { API_CONFIG, API_ENDPOINTS, API_HEADERS } from "@/config/api"
import { apiClient } from "../api" // Importation de apiClient
import { DossierMedical, CreateDossierMedicalPayload } from "@/types/medical" // Chemin corrig√©
import { Personne } from "@/types/utilisateur"

const DOSSIER_MEDICAL_API_URL = API_ENDPOINTS.DOSSIER.DOSSIER_MEDICAL

export const dossierMedicalService = {
  /**
   * R√©cup√®re tous les dossiers m√©dicaux.
   * @returns Une promesse qui r√©sout en un tableau de DossierMedical.
  */
  getAllDossiers: async (): Promise<DossierMedical[]> => {
    const allDossiersUrl = API_ENDPOINTS.DOSSIER.DOSSIER_MEDICAL_SEARCH.ALL
    console.log("üîç Fetching all medical records...")
    return apiClient.get<DossierMedical[]>(allDossiersUrl)
  },

  /**
   * R√©cup√®re un dossier m√©dical par son ID.
   * @param id L'ID du dossier m√©dical.
   * @returns Une promesse qui r√©sout en un objet DossierMedical.
  */
  getDossierById: async (id: number): Promise<DossierMedical> => {
    console.log(`üîç Fetching medical record with ID: ${id}`)
    return apiClient.get<DossierMedical>(`${DOSSIER_MEDICAL_API_URL}/${id}`)
  },

  /**
   * Cr√©e un nouveau dossier m√©dical.
   * @param data Les donn√©es pour le nouveau dossier m√©dical.
   * @returns Une promesse qui r√©sout en l'objet DossierMedical cr√©√©.
  */
  createDossier: async (data: CreateDossierMedicalPayload): Promise<DossierMedical> => {
    console.log("‚ûï Creating new medical record:", data)
    try {
      const newDossier = await apiClient.post<DossierMedical>(DOSSIER_MEDICAL_API_URL, data)
      console.log("‚úÖ Medical record created:", newDossier)
      return newDossier
    } catch (error) {
      console.error("‚ùå Error creating medical record:", error)
      throw error
    }
  },

  /**
   * Met √† jour un dossier m√©dical existant.
   * @param id L'ID du dossier m√©dical √† mettre √† jour.
   * @param data Les donn√©es √† mettre √† jour.
   * @returns Une promesse qui r√©sout en l'objet DossierMedical mis √† jour.
  */
  updateDossier: async (id: number, data: CreateDossierMedicalPayload): Promise<DossierMedical> => {
    console.log(`‚úèÔ∏è Updating medical record ${id}:`, data)
    try {
      const updatedDossier = await apiClient.put<DossierMedical>(`${DOSSIER_MEDICAL_API_URL}/${id}`, data)
      console.log("‚úÖ Medical record updated:", updatedDossier)
      return updatedDossier
    } catch (error) {
      console.error(`‚ùå Error updating medical record ${id}:`, error)
      throw error
    }
  },

  /**
   * Supprime un dossier m√©dical par son ID.
   * @param id L'ID du dossier m√©dical √† supprimer.
   * @returns Une promesse qui r√©sout lorsque la suppression est r√©ussie.
  */
  deleteDossier: async (id: number): Promise<void> => {
    console.log(`üóëÔ∏è Deleting medical record ${id}`)
    try {
      // Remplacement de apiClient.delete par un appel fetch direct pour mieux g√©rer les r√©ponses sans contenu (204 No Content)
      const response = await fetch(`${API_CONFIG.BASE_URL}${DOSSIER_MEDICAL_API_URL}/${id}`, {
        method: 'DELETE',
        headers: API_HEADERS,
      });

      if (!response.ok) {
        // G√®re les r√©ponses qui ne sont pas des succ√®s (ex: 404, 500)
        const errorText = await response.text().catch(() => `Erreur serveur: ${response.status}`);
        throw new Error(errorText);
      }

      // Une r√©ponse 204 No Content est un succ√®s mais n'a pas de corps, ce qui causait l'erreur JSON.parse.
      console.log("‚úÖ Medical record deleted successfully");
    } catch (error) {
      console.error(`‚ùå Error deleting medical record ${id}:`, error)
      throw error
    }
  },

  /**
   * R√©cup√®re tous les patients. N√©cessaire pour la s√©lection du patient dans le formulaire.
   * @returns Une promesse qui r√©sout en un tableau de Personne.
  */
  getAllPatients: async (): Promise<Personne[]> => {
    const PATIENTS_API_URL = API_ENDPOINTS.UTILISATEUR.PERSONNES
    console.log("üîç Fetching all patients...")
    try {
      const patients = await apiClient.get<Personne[]>(PATIENTS_API_URL)
      console.log("‚úÖ Patients fetched:", patients?.length || 0)
      return patients
    } catch (error) {
      console.error("‚ùå Error fetching patients:", error)
      throw error
    }
  },
}
