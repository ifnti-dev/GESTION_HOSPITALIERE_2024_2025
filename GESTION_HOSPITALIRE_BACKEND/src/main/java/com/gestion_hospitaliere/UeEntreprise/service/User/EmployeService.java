package com.gestion_hospitaliere.UeEntreprise.service.User;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gestion_hospitaliere.UeEntreprise.model.User.Employe;
import com.gestion_hospitaliere.UeEntreprise.model.User.Personne;
import com.gestion_hospitaliere.UeEntreprise.model.User.Role;
import com.gestion_hospitaliere.UeEntreprise.repository.User.EmployeRepository;
import com.gestion_hospitaliere.UeEntreprise.repository.User.PersonneRepository;
import com.gestion_hospitaliere.UeEntreprise.repository.User.RoleRepository;

@Service
public class EmployeService {

    @Autowired
    private EmployeRepository employeRepository;

    @Autowired
    private PersonneRepository personneRepository;

    @Autowired
    private RoleRepository roleRepository;

 
    @Transactional
    public Employe creerEmploye(Employe employe) {
        // G√©rer la Personne associ√©e √† l'Employe
        Personne personneInput = employe.getPersonne();
        if (personneInput == null) {
            throw new IllegalArgumentException("Les d√©tails personnels (Personne) sont requis pour cr√©er un employ√©.");
        }

        Personne managedPersonne;
        if (personneInput.getId() != null) {
            managedPersonne = personneRepository.findById(personneInput.getId())
                    .orElseThrow(() -> new IllegalArgumentException("Personne non trouv√©e avec l'ID : " + personneInput.getId()));
        } else if (personneInput.getEmail() != null) {
            // Optionnel: rechercher par email pour √©viter les doublons de Personne
            Optional<Personne> personneParEmail = personneRepository.findByEmail(personneInput.getEmail());
            if (personneParEmail.isPresent()) {
                managedPersonne = personneParEmail.get();
            } else {
                // Assurer que les champs requis pour une nouvelle personne sont l√†
                if (personneInput.getNom() == null || personneInput.getPrenom() == null) {
                    throw new IllegalArgumentException("Nom et pr√©nom sont requis pour cr√©er une nouvelle personne (via email non trouv√©).");
                }
                managedPersonne = personneRepository.save(personneInput);
            }
        } else {
            // Si ni ID ni email, on sauvegarde la nouvelle personne (assurez-vous que les champs requis sont l√†)
            if (personneInput.getNom() == null || personneInput.getPrenom() == null) {
                throw new IllegalArgumentException("Nom et pr√©nom sont requis pour cr√©er une nouvelle personne associ√©e √† l'employ√©.");
            }
            managedPersonne = personneRepository.save(personneInput);
        }

        employe.setPersonne(managedPersonne);
        // Assurer la liaison bidirectionnelle avant de sauvegarder l'employ√©
        if (managedPersonne.getEmploye() == null) {
            managedPersonne.setEmploye(employe);
        }

        // G√©rer les R√¥les associ√©s √† l'Employe
        Set<Role> managedRoles = new HashSet<>();
        if (employe.getRoles() != null) {
            for (Role roleDetails : employe.getRoles()) {
                if (roleDetails.getId() != null) {
                    Role managedRole = roleRepository.findById(roleDetails.getId())
                            .orElseThrow(() -> new IllegalArgumentException("R√¥le non trouv√© avec l'ID : " + roleDetails.getId()));
                    managedRoles.add(managedRole);
                } else if (roleDetails.getNom() != null) {
                    // Supposant que RoleRepository a findByNom et que Role a un champ 'nom'
                    Role managedRole = roleRepository.findByNom(roleDetails.getNom())
                            .orElseThrow(() -> new IllegalArgumentException("R√¥le non trouv√© avec le nom : " + roleDetails.getNom() + ". Veuillez fournir un ID de r√¥le valide ou un nom de r√¥le existant."));
                    managedRoles.add(managedRole);
                } else {
                    throw new IllegalArgumentException("D√©tails de r√¥le incomplets : ID ou nom du r√¥le requis.");
                }
            }
        }
        employe.setRoles(managedRoles);
        Employe savedEmploye = employeRepository.save(employe);
        return savedEmploye;
    }

    /**
     * üîπ R√©cup√©rer tous les employ√©s
     */
    public List<Employe> recupererTousLesEmployes() {
        return employeRepository.findAll();
    }

    /**
     * üîπ R√©cup√©rer un employ√© par ID
     */
    public Optional<Employe> obtenirEmployeParId(Long id) {
        return employeRepository.findById(id);
    }

    /**
     * üîπ Mettre √† jour les informations d‚Äôun employ√©
     */
    @Transactional
    public Employe mettreAJourEmploye(Long id, Employe updatedEmploye) {
        Employe existant = employeRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Aucun employ√© trouv√© avec l'ID : " + id));

        existant.setHoraire(updatedEmploye.getHoraire());
        existant.setDateAffectation(updatedEmploye.getDateAffectation());
        existant.setSpecialite(updatedEmploye.getSpecialite());
        existant.setNumOrdre(updatedEmploye.getNumOrdre());

        // Mise √† jour des r√¥les de mani√®re plus robuste
        if (updatedEmploye.getRoles() != null) {
            Set<Role> newManagedRoles = new HashSet<>();
            for (Role roleDetail : updatedEmploye.getRoles()) {
                if (roleDetail.getId() != null) {
                    Role managedRole = roleRepository.findById(roleDetail.getId())
                            .orElseThrow(() -> new IllegalArgumentException("R√¥le non trouv√© pour mise √† jour avec l'ID : " + roleDetail.getId()));
                    newManagedRoles.add(managedRole);
                } else if (roleDetail.getNom() != null) { 
                    // Supposant que RoleRepository a findByNom et que Role a un champ 'nom'
                    Role managedRole = roleRepository.findByNom(roleDetail.getNom())
                            .orElseThrow(() -> new IllegalArgumentException("R√¥le non trouv√© pour mise √† jour avec le nom : " + roleDetail.getNom()));
                    newManagedRoles.add(managedRole);
                } else {
                     throw new IllegalArgumentException("D√©tails de r√¥le incomplets pour la mise √† jour : ID ou nom du r√¥le requis.");
                }
            }
            existant.setRoles(newManagedRoles);
        } else {
            // Si updatedEmploye.getRoles() est null, cela effacera les r√¥les existants.
            // Si vous souhaitez ne pas modifier les r√¥les dans ce cas, commentez la ligne suivante.
            existant.setRoles(new HashSet<>());
        }

        return employeRepository.save(existant);
    }

    /**
     * üîπ Supprimer un employ√©
     */
    public void supprimerEmploye(Long id) {
        if (!employeRepository.existsById(id)) {
            throw new IllegalArgumentException("Employ√© inexistant avec l'ID : " + id);
        }
        employeRepository.deleteById(id);
    }

    /**
     * üîπ V√©rifier l'existence d‚Äôun employ√©
     */
    public boolean existeEmployeParId(Long id) {
        return employeRepository.existsById(id);
    }

    /**
     * üîπ Ajouter un r√¥le √† un employ√©
     */
    @Transactional
    public Employe ajouterRoleAEmploye(Long employeId, Long roleId) {
        Employe employe = employeRepository.findById(employeId)
                .orElseThrow(() -> new IllegalArgumentException("Employ√© introuvable"));

        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new IllegalArgumentException("R√¥le introuvable"));

        employe.getRoles().add(role);
        return employeRepository.save(employe);
    }

    /**
     * üîπ Supprimer un r√¥le d‚Äôun employ√©
     */
    @Transactional
    public Employe retirerRoleAEmploye(Long employeId, Long roleId) {
        Employe employe = employeRepository.findById(employeId)
                .orElseThrow(() -> new IllegalArgumentException("Employ√© introuvable"));

        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new IllegalArgumentException("R√¥le introuvable"));

        employe.getRoles().remove(role);
        return employeRepository.save(employe);
    }

    /**
     * üîπ Affecter une personne existante √† un employ√© existant
     */
    @Transactional
    public Employe affecterPersonneAEmploye(Long employeId, Long personneId) {
        Employe employe = employeRepository.findById(employeId)
                .orElseThrow(() -> new IllegalArgumentException("Employ√© introuvable"));

        Personne personne = personneRepository.findById(personneId)
                .orElseThrow(() -> new IllegalArgumentException("Personne introuvable"));

        // G√©rer la relation bidirectionnelle
        employe.setPersonne(personne);
        if (personne.getEmploye() != null && !personne.getEmploye().equals(employe)) {
            // G√©rer le cas o√π la personne est d√©j√† associ√©e √† un autre employ√© si n√©cessaire
        }
        personne.setEmploye(employe);
        return employeRepository.save(employe);
    }
}